-- 0. Enable helpers
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- 1. ENUMS
CREATE TYPE job_status AS ENUM ('queued','processing','ready','failed');
CREATE TYPE blueprint_status AS ENUM ('processing','ready','failed');

-- 2. USERS (minimal: used by /auth/login and /users/me)
-- The login flow in your OpenAPI uses email-only; we store minimal profile info.
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email TEXT NOT NULL UNIQUE,
  -- optional fields for future: display_name, avatar_url
  display_name TEXT,
  avatar_url TEXT,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX ON users (email);

-- 3. UPLOADS (records the presigned upload intent and final file URL)
-- The API returns uploadUrl (presigned) and fileUrl (final public path) â€” we persist to audit/trace.
CREATE TABLE uploads (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  session_id TEXT,             -- optional: client-provided session id (if any)
  filename TEXT NOT NULL,      -- header X-Filename in request
  upload_url TEXT,             -- presigned PUT URL returned by server
  file_url TEXT,               -- final accessible URL to the uploaded file
  created_by UUID REFERENCES users(id) ON DELETE SET NULL,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  metadata jsonb DEFAULT '{}'  -- any provider response / extra info
);
CREATE INDEX ON uploads (created_by);
CREATE INDEX ON uploads (file_url);

-- 4. JOBS (processing jobs created from an uploaded image)
-- Maps to CreateJobRequest (imageURL) and JobStatusResponse (id, status, assetId)
CREATE TABLE jobs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  image_url TEXT NOT NULL,           -- source image (from uploads.file_url typically)
  status job_status NOT NULL DEFAULT 'queued',
  asset_id UUID,                      -- references assets.id when processing produced an asset
  error_message TEXT,                 -- optional: store last error
  created_by UUID REFERENCES users(id) ON DELETE SET NULL,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  metadata jsonb DEFAULT '{}'         -- provider task ids, worker hints, etc.
);
CREATE INDEX ON jobs (status);
CREATE INDEX ON jobs (asset_id);
CREATE INDEX ON jobs (created_by);

-- 5. ASSETS (top-level asset produced by processing)
-- The AssetResponse includes id and parts (fileURL etc.). We store asset-level metadata and link to parts.
CREATE TABLE assets (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title TEXT,                         -- optional human-friendly title
  source_image_url TEXT,              -- original image that led to this asset
  created_from_job UUID REFERENCES jobs(id) ON DELETE SET NULL,
  created_by UUID REFERENCES users(id) ON DELETE SET NULL,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  metadata jsonb DEFAULT '{}'         -- e.g., algorithm, parameters, sizes
);
CREATE INDEX ON assets (created_from_job);
CREATE INDEX ON assets (created_by);

-- 6. ASSET PARTS (the AssetResponse.parts array)
-- Each part has id, name, fileURL per OpenAPI AssetPart.
CREATE TABLE asset_parts (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  asset_id UUID NOT NULL REFERENCES assets(id) ON DELETE CASCADE,
  part_name TEXT NOT NULL,            -- 'name' in API
  file_url TEXT NOT NULL,             -- 'fileURL' in API
  mime_type TEXT,
  size_bytes BIGINT,
  position INT DEFAULT 0,             -- ordering among parts
  created_at timestamptz NOT NULL DEFAULT now(),
  metadata jsonb DEFAULT '{}'
);
CREATE INDEX ON asset_parts (asset_id);
CREATE INDEX ON asset_parts (file_url);

-- 7. BLUEPRINTS (user-visible summaries listed in /blueprints endpoints)
-- BlueprintSummary in API: id, title, status, thumbnailUrl, assetId
CREATE TABLE blueprints (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title TEXT NOT NULL,
  status blueprint_status NOT NULL DEFAULT 'processing',
  thumbnail_url TEXT,                 -- thumbnailUrl in spec (nullable)
  asset_id UUID REFERENCES assets(id) ON DELETE SET NULL,
  created_by UUID REFERENCES users(id) ON DELETE SET NULL,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  metadata jsonb DEFAULT '{}'         -- tags, original request data, etc.
);
CREATE INDEX ON blueprints (status);
CREATE INDEX ON blueprints (created_by);
CREATE INDEX ON blueprints (asset_id);

-- 8. OPTIONAL: Simple events/audit for important actions (uploads, job state changes)
CREATE TABLE events_audit (
  id BIGSERIAL PRIMARY KEY,
  entity_type TEXT,                   -- e.g., 'upload','job','asset','blueprint'
  entity_id UUID,
  action TEXT,                        -- e.g., 'created','status_updated'
  actor TEXT,                         -- e.g., 'user:UUID' or 'system'
  payload jsonb,
  created_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX ON events_audit (entity_type, entity_id);
CREATE INDEX ON events_audit (created_at);

-- 9. TRIGGER: keep updated_at current on common tables with updated_at
CREATE OR REPLACE FUNCTION trg_set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Attach trigger to tables that have updated_at
CREATE TRIGGER users_set_updated_at          BEFORE UPDATE ON users          FOR EACH ROW EXECUTE FUNCTION trg_set_updated_at();
CREATE TRIGGER uploads_set_updated_at        BEFORE UPDATE ON uploads        FOR EACH ROW EXECUTE FUNCTION trg_set_updated_at();
CREATE TRIGGER jobs_set_updated_at           BEFORE UPDATE ON jobs           FOR EACH ROW EXECUTE FUNCTION trg_set_updated_at();
CREATE TRIGGER assets_set_updated_at         BEFORE UPDATE ON assets         FOR EACH ROW EXECUTE FUNCTION trg_set_updated_at();
CREATE TRIGGER blueprints_set_updated_at     BEFORE UPDATE ON blueprints     FOR EACH ROW EXECUTE FUNCTION trg_set_updated_at();

-- 10. Helpful view: JobStatusResponse materialized view (optional)
-- Example: quick lookup for job id/status/asset_id as in JobStatusResponse
CREATE OR REPLACE VIEW job_status_view AS
SELECT id::text AS id,
       status::text AS status,
       asset_id::text AS asset_id
FROM jobs;

-- End of schema


